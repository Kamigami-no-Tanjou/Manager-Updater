---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by RedNeath.
--- DateTime: 16/02/2024 11:32
---
local health = {}
local json = require('lunajson')
local luasql = require('luasql.mysql')
local time = require('socket')
local logger = require('utils.logger')

local database = require('config.database')
local tables = require('enums.database.tables')
local time_units = require('enums.unit.time')


function health.execute(_, response)
    local results = {
        api = "UP"
    }


    local env = luasql.mysql()
    local connection = env:connect(database.source_name, database.username, database.password)

    if not connection then
        env:close()
        health.handle_connection_failure(results, response)
        return
    end
    results.database = "UP"
    health.compute_database_latency(connection, results, time_units.milliseconds)


    health.send_response(results, response)
end



function health.send_response(results, response)
    response:write(json.encode(results))
end



function health.handle_connection_failure(results, response)
    results.database = "DOWN"
    health.send_response(results, response)

    logger.log(logger.levels.WARN, "Could not connect to the database in `use_cases.health.execute`!")
end



function health.compute_time(connection, table_name, time_unit)
    local time_before = time.gettime(0)

    local statement = connection:escape("SELECT * FROM " .. table_name)
    connection:execute(statement)

    return (time.gettime(0) - time_before) * time_unit.from_seconds -- gettime function returns a timestamp value in seconds
end



function health.compute_database_latency(connection, results, time_unit)
    -- Getting database response time. To see if the server slows down, we must look at the tables that do not move over
    -- time. Like Calendars, Classes, Elems, FamilyStatuses, Genders and Sexes.
    -- The result for other tables will be displayed too, but for a more informative purpose.

    results.database_latency = { unit = time_unit.name }
    for key, value in pairs(tables) do
        local elapsed_time = health.compute_time(connection, value, time_unit)

        results.database_latency.total = (results.database_latency.total or 0) + elapsed_time
        results.database_latency[key] = elapsed_time
    end
end

return health
