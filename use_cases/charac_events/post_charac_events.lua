---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by RedNeath.
--- DateTime: 18/02/2024 16:10
---
local json = require('lunajson')
local connector = require('utils.database_connection')
local checker = require('utils.data_checker')
local http = require('enums.http_facade')
local prototype = require('entities.charac_event')
local logger = require('utils.logger')
local copy = require('utils.copy')
local escaper = require('utils.extra_function_escape')

local post_charac_events = {
    query = [[
        INSERT INTO CharacEvents
        (
            StartingDate,
            EndingDate,
            Charac,
            Description
        )
        VALUES

    ]],

    value = "('%s', '%s', %s, '%s')"
}

function post_charac_events.execute(request, response)
    local connection, env = connector.create()
    if not connection then return end
    escaper.set_connection(connection)

    local new_events = json.decode(request:receiveBody())
    local query = post_charac_events.create_query(response, new_events)
    if not query then return end

    -- try to insert into the database
    if not connection:execute(query) then
        post_charac_events.character_not_found(response, connection, env)
        return
    end
    logger.log(logger.levels.DEBUG, "query succeeded")

    response
            :statusCode(http.codes.CREATED)
            :sendOnlyHeaders()
    connection:close()
    env:close()

    logger.log(logger.levels.DEBUG, "connection & environment closed")
end

function post_charac_events.create_query(response, events)
    local query = post_charac_events.query
    local is_first_value = true
    local model = copy(prototype.properties)
    model.id = nil

    for _, event in pairs(events) do
        logger.log(logger.levels.DEBUG, "checking data compliance")
        if not pcall(checker.ensure_model_compliance, event, model, escaper.apply) then
            logger.log(logger.levels.DEBUG, "non-compliant data")
            post_charac_events.lacking_data(response, event)
            return nil
        end
        logger.log(logger.levels.DEBUG, "compliant data")

        if not is_first_value then
            query = query .. ", " .. post_charac_events.format_value(event)
        else
            query = query .. post_charac_events.format_value(event)
            is_first_value = false
        end
    end

    logger.log(logger.levels.DEBUG, query)
    return query
end

function post_charac_events.format_value(event)
    return string.format(
            post_charac_events.value,
            event.starting_date,
            event.ending_date,
            event.charac,
            event.description
    )
end

function post_charac_events.lacking_data(response, event)
    logger.log(logger.levels.DEBUG, "sending error response...")
    response
            :statusCode(http.codes.BAD_REQUEST)
            :write(json.encode({ message = "Detected missing values in this entity", event = event }))
end

function post_charac_events.character_not_found(response, connection, env)
    response
            :statusCode(http.codes.NOT_FOUND)
            :write(json.encode({ message = "Character not found!" }))

    connection:close()
    env:close()
end

return post_charac_events
