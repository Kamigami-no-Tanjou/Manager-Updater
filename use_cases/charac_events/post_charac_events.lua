---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by RedNeath.
--- DateTime: 18/02/2024 16:10
---
local json = require('lunajson')
local connector = require('utils.database_connection')
local http = require('enums.http_facade')
local prototype = require('entities.charac_event')
local escaper = require('utils.extra_function_escape')
local query_builder = require('utils.query_builder')

local post_charac_events = {
    query = [[
        INSERT INTO CharacEvents
        (
            StartingDate,
            EndingDate,
            Charac,
            Description
        )
        VALUES

    ]],

    value = "(%s, %s, %s, %s)"
}

function post_charac_events.execute(request, response)
    local connection, env = connector.create()
    if not connection then return end
    escaper.set_connection(connection)

    local new_events = json.decode(request:receiveBody())
    local query = query_builder.create_insert_query(
            post_charac_events.query,
            post_charac_events.value,
            prototype,
            new_events,
            escaper
    )

    if type(query) ~= "string" then
        post_charac_events.lacking_data(response, query, connection, env)
        return
    end
    -- try to insert into the database
    if not connection:execute(query) then
        post_charac_events.character_not_found(response, connection, env)
        return
    end

    response
            :statusCode(http.codes.CREATED)
            :sendOnlyHeaders()
    post_charac_events.close(connection, env)
end

function post_charac_events.lacking_data(response, event, connection, env)
    response
            :statusCode(http.codes.BAD_REQUEST)
            :write(json.encode({ message = "Detected missing values in this entity", event = event }))
    post_charac_events.close(connection, env)
end

function post_charac_events.character_not_found(response, connection, env)
    response
            :statusCode(http.codes.NOT_FOUND)
            :write(json.encode({ message = "Character not found!" }))
    post_charac_events.close(connection, env)
end

function post_charac_events.close(connection, env)
    connection:close()
    env:close()
end

return post_charac_events
